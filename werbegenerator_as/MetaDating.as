/* AS3	Copyright 2012 Philipp Schoessler	Copyright 2013 Valerian Blos*/package {		/**	 *	 *	Dokumentenklasse	 *	 *	@langversion ActionScript 3.0	 *	@playerversion Flash 9.0	 *	 *	@author Sven Gali	 *	@since  12.11.2008	 *	 *  @author Philipp Schoessler	 *	@since  01.10.2010		 *	 *  @author Valerian Blos	 *	@since  01.01.2013		 *	 */	import flash.display.*;	import flash.events.*;	//import flash.media.Video;	//import flash.system.Security;	import XMLload;	//import Player;	import flash.text.*;	import flash.system.*;	import fl.controls.Slider;	import fl.events.SliderEvent;	import fl.controls.ComboBox;	import fl.managers.StyleManager;	// TIMER	import flash.utils.Timer;	import flash.events.TimerEvent;		import Load_mc;		//[Frame(factoryClass="Preloader")]	public class MetaDating extends MovieClip 	{		//--------------------------------------//  PRIVATE VARIABLES//--------------------------------------		private var xmlLoad:XMLload;		private var _databaseConnect:databaseConnect;		private var genreArr:Array = new Array();		private var playList:Array = new Array();		private var videoList:Array = new Array();		private var speechList:Array = new Array();		private var musicList:Array = new Array();				private	var control: Boolean = false;		private var player: Player;		public static var debugArray:Array;		private var myTimer:Timer;				private var project:ProjectCalc;		private var cgen:CgenCalc;					private var checkFile:FileLoaderUtils = new FileLoaderUtils();			private var _reload:Boolean;		private var genre:String;		private var notFound:int = 0;				private var ld:Load_mc = new Load_mc ();				private static var XML_PATH:String = "xmls/";						private var messageMain:String;		private var messageSide1:String;		private var messageSide2:String;		private var moodMusic:String;		private var claimImagePath:String;		private var accuracy:int;		public static var STAGE:Stage; //for global access		public static var ROOT:MovieClip; // for global access		//endscreen		public static var screen_endOfVideo:screenEndOfVideo = new screenEndOfVideo();		public static var bg_endscreen:bgEndscreen = new bgEndscreen();		public static var bg_startclip:bgStartclip = new bgStartclip();		//public static var social_media_bar:socialMediaBar = new socialMediaBar();				//private var speechOnOff:String;		public static var startInFullscreen:Boolean = false; //var for checking if player was in fullscreen		public static var restart:Boolean = false		//--------------------------------------//  CONSTRUCTOR//--------------------------------------				public function MetaDating()		{			//addEventListener(Event.ADDED_TO_STAGE,addedToStage)						stage.displayState = StageDisplayState.NORMAL;			stage.scaleMode = StageScaleMode.NO_SCALE;            //stage.align = StageAlign.TOP_LEFT;			Security.allowDomain("*");			STAGE = this.stage;			//ROOT = this.root;			init();		}		//--------------------------------------//  PRIVATE & PROTECTED INSTANCE METHODS//--------------------------------------		private function init ():void		{			//Security.LOCAL_WITH_NETWORK;			xmlLoad = new XMLload ();			xmlLoad.addEventListener (LadEvent.XML_LOADED, loaded);						player = new Player ();			addChild (player);						checkFile.addEventListener(UtilEvent.FILE_NOT_FOUND, fileNotFound);						bg_startclip.x = 359;			bg_startclip.y = 110;			addChild(bg_startclip) //lade startbildschirm in bühne			bg_startclip.start_btn.addEventListener(MouseEvent.CLICK, initMetadating);			//btn_debug.addEventListener(MouseEvent.CLICK, toggleDebug);			//debugTextField.text = "off";			player.addEventListener("reload button pressed", reload);						//reloads für endscreen:			screen_endOfVideo.btn_restart.addEventListener(MouseEvent.CLICK, reload);			screen_endOfVideo.btn_restart_different.addEventListener(MouseEvent.CLICK, showStartscreen);						//social media buttons			screen_endOfVideo.social_media.btn_facebook.addEventListener(MouseEvent.CLICK,socialMediaButton);			screen_endOfVideo.social_media.btn_twitter.addEventListener(MouseEvent.CLICK,socialMediaButton);			screen_endOfVideo.social_media.btn_mail.addEventListener(MouseEvent.CLICK,socialMediaButton);						trace("start!");			//comboBox.value = "fear";			//this.stage.addEventListener(KeyboardEvent.KEY_UP, keyHandler);		}		//--------------------------------------       /* private function addedToStage(event:Event):void		{            removeEventListener(Event.ADDED_TO_STAGE,addedToStage)            trace("Project is ready to go!")        }*///--------------------------------------						private function checkFiles(arrList:Array)		{			for(var i:int = 0; i < arrList.length; i++)			{				checkFile.doesFileExist("media/" + Utils.genre + "/" + arrList[i]);			}		}		//--------------------------------------				private function keyHandler(event:KeyboardEvent):void		{			trace("ASCII Key Event: " + event.keyCode);			switch (event.keyCode)			{				case 82 : //Reload KeyCode R					player.stopVideo();					reload();				break;				case 88 : //Stop Video KeyCode X					trace("end");					player.stopSound();					player.stopVideo();						break;				case 84 : //Test Video KeyCode T					trace("project");					Utils.genre = "project";									xmlLoad.laden(XML_PATH + Utils.genre + ".xml");				break;				case 67 : //Cgen Video KeyCode 					initMetadating();				break;								// FOR DEBUG ONLY				case 39 : // keyCode RIGHT jump to next video in playList					player.nextVid();				break;				case 38: // keyCode UP repeat current vid from beginning					player.repeatVid();				break;				case 37 : // keyCode LEFT jump to previous video in playList					player.previousVid();				break;				case 68: // keyCode D					toggleDebug();				break;			}			//Utils.idx = 0; //play playlist array from beginning		}		//--------------------------------------				private function loaded(e:LadEvent):void		{			switch (Utils.genre)			{				case "project_name" : 					project = new ProjectCalc();					playList = project.calculateClips(e.xmlList);										trace(project.getAllClipNames);										//checkFiles(project.getAllClipNames); //files are checked in Player Class everytime before the clip plays. If you check more than 20 clips the program will crash (look for better solution in future than the FileLoader hack)					//player.startVideo(playList);						debugArray = project.getMetaList;				break;												case "cgen":					if(restart == true){						//play the same playlist						player.startVideo(videoList, speechList, musicList, textInput_claim.text, claimImagePath);					}					else					{						cgen = new CgenCalc();																			cgen.setMessageMain = dropdown_main.value;						cgen.setMessageSide1 = dropdown_side1.value;						cgen.setMessageSide2 = dropdown_side2.value;						cgen.setMoodMusic = dropdown_music.value;						cgen.setAccuracy = sld_accuracy.value;						Player.speechOnOff = dropdown_speech.value;						//cgen.setClaim = textInput_claim.text;							cgen.calculateClips(e.xmlList);												videoList = cgen.getVideoList;						speechList = cgen.getSpeechList;						musicList = cgen.getMusicList;						claimImagePath = cgen.getClaimImgPath;																		player.startVideo(videoList, speechList, musicList, textInput_claim.text, claimImagePath);					}				break;			}		}		//--------------------------------------		private function reload(e:Event = null):void		{			//wenn function von endscreen aufgerufen wird, entferne schwarzen bildschirm			switch (e.currentTarget.name)			{				case "btn_restart":					STAGE.removeChild(screen_endOfVideo);					STAGE.removeChild(bg_endscreen);					restart = true;								}						switch (Utils.genre)			{				case "project_name" :					xmlLoad.laden(XML_PATH + Utils.genre + ".xml");				break;				case "cgen":					xmlLoad.laden(XML_PATH + Utils.genre + ".xml");				break;			}			Utils.idx = 0; //play playlist array from beginning		}		//--------------------------------------		private function showStartscreen(e:MouseEvent = null):void		{			addChild(bg_startclip);					STAGE.removeChild(screen_endOfVideo);					STAGE.removeChild(bg_endscreen);		}//-------------------------------------						private function initMetadating(e:MouseEvent = null):void		{			switch(e.currentTarget.name)			{				case "start_btn":					removeChild(bg_startclip); //entferne wieder den startscreen (mit playbutton)					//starte Timer für 1,5 sek. für schwarzen screen am anfang					myTimer = new Timer(1500, 1);					myTimer.start();					myTimer.addEventListener(TimerEvent.TIMER, startMetadating);				break;			}		}		//--------------------------------------		private function startMetadating(e:TimerEvent):void	{		trace("start cgen");		Utils.genre = "cgen";		xmlLoad.laden(XML_PATH + Utils.genre + ".xml");		restart = false;		startInFullscreen =false;	}//--------------------------------------				private function fileNotFound(e:UtilEvent):void		{			//trace("file not found: " + checkFile.url);		}		//--------------------------------------				private function toggleDebug(e:MouseEvent = null):void		{			if(!Utils.toggleDebug)			{				trace("debug activated");				Utils.toggleDebug = true;				//debugTextField.text.color = ;				//debugTextField.text = "on";							}			else			{				trace("debug deactivated");				Utils.toggleDebug = false;				//debugTextField.text = "off";			}					}//--------------------------------------		public static function endOfVideo():void		{			//removeChild(bg_startclip);			bg_endscreen.x = Player.vid.x;			bg_endscreen.y = Player.vid.y;			bg_endscreen.height = Player.vid.height;			bg_endscreen.width = Player.vid.width;			STAGE.addChild(bg_endscreen);						screen_endOfVideo.x = Player.vid.x;			screen_endOfVideo.y = Player.vid.y;			screen_endOfVideo.height = Player.vid.height;			screen_endOfVideo.width = Player.vid.width;			STAGE.addChild(screen_endOfVideo);		}		//--------------------------------------		public static function socialMediaButton(e:Event) //social media function:  hier soll später die variablen übergabe für die social media bar passieren			{								trace(e.currentTarget.name);				//databaseConnect!!!			}//-------------------------------------- DON'T NEED IT		private function initOptions():void	{		dropdown_main.addEventListener(Event.CHANGE, setMessageMain);		dropdown_side1.addEventListener(Event.CHANGE, setMessageSide1);		dropdown_side2.addEventListener(Event.CHANGE, setMessageSide1);		dropdown_music.addEventListener(Event.CHANGE, setMoodMusic);	}	//-------------------------------------- DON'T NEED IT	private function setMessageMain():void	{		messageMain = dropdown_main.value;	}		private function setMessageSide1():void	{		messageSide1 = dropdown_side1.value;	}		private function setMessageSide2():void	{		messageSide2 = dropdown_side2.value;	}		private function setMoodMusic():void	{		moodMusic = dropdown_music.value;	}}}