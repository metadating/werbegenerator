/* AS3	Copyright 2012 Philipp Schoessler*///stop button noch nicht so richtigpackage {		import flash.events.*;	import flash.display.*;	import flash.media.*;	import flash.text.*;	import flash.system.*;	import flash.net.NetConnection;	import flash.net.NetStream;	import flash.net.URLRequest;	import flash.geom.*;	import Debug;	import SoundPlayer;	import UtilEvent;		// TIMER	import flash.utils.Timer;	import flash.events.TimerEvent;		import XMLload;		//BUTTONS	import BtnClose;	import BtnReload;		public class Player extends MovieClip 	{		//--------------------------------------//  PRIVATE VARIABLES//--------------------------------------				private var nc:NetConnection;		private var ns:NetStream;		private var client:Object;		private var meta:Object;		public static var vid: Video;		private var vidContainer:MovieClip = new MovieClip();		private var _stage:Stage = stage;				//BUTTONS		//private var btn_close:BtnClose = new BtnClose();		private var btn_reload:BtnReload = new BtnReload();		private var btn_pause:btnPause = new btnPause();		private var btn_stop:btnStop = new btnStop();		private var btn_playPlayer:btnPlayPlayer = new btnPlayPlayer();		private var btn_pausePlayer:btnPausePlayer = new btnPausePlayer();		private var btn_invisiblePauseToggle:btnInvisiblePauseToggle = new btnInvisiblePauseToggle();		private var btn_fullscreen:btnFullscreen = new btnFullscreen();		private var btn_volume_on:btnVolumeOn = new btnVolumeOn();		private var btn_volume_off:btnVolumeOff = new btnVolumeOff();		private var bg_player_small:bgPlayerSmall = new bgPlayerSmall();		private var bg_player_big:bgPlayerBig = new bgPlayerBig();		private var addHeight:int = 0;						// Elements for DebugMode		private var metaInfo:TextField = new TextField();		private var debug:Debug = new Debug();		private var debugArray:Array;				private var videoList:Array;		private var speechList:Array;		private var musicList:Array;		private var claimText:String;		private var claimImgPath:String;		private var bPause:Boolean = true;		public static var bFullscreen:Boolean = true;		private var bVolume:Boolean = true;				private var genre:String;					///////SETTINGS//////////////////////////		private var DEBUG:Boolean = false;		private var PRESENTATION:Boolean = false;		/////////////////////////////////////////								private var soundSpeech:SoundPlayer;		private var soundMusic:SoundPlayer;		public static var speechOnOff;		private var speechVolume:Number = 0.9;						private var playBool:Boolean;		private var bNextSound:Boolean = true;			//TIMER		//Initialize Timer for Utils.genre == meat		private var myTimer:Timer = new Timer(6000, 1);		//var errorTimer = new Timer(500, 1); // not used yet				//Claim		private var claim:Claim;		private var claim_bkg:ClaimBkg = new ClaimBkg();				private var xmlLoad:XMLload = new XMLload();				//FOR CHECKING IF CERTAIN FILE EXISTS BEFORE PLAYING IT		private var checkFile:FileLoaderUtils = new FileLoaderUtils();		//--------------------------------------//  CONSTRUCTOR//--------------------------------------				public function Player():void 		{			build();		}		//--------------------------------------//  PUBLIC METHODS//--------------------------------------		public function startVideo(_videoList:Array, _speechList:Array, _musicList:Array, _claimText:String, _claimImgPath:String):void		{					videoList = _videoList;			speechList = _speechList;			musicList = _musicList;			claimText = _claimText;			claimImgPath = _claimImgPath;						claim = new Claim(claimText);			claim.init(claimImgPath);						//init Sound Channels			soundSpeech = new SoundPlayer();			soundMusic = new SoundPlayer();														if(Utils.genre == "cgen")			{				standardVidSetup();				//this.setVideo(768, VIDEO_HEIGHT_DEMO);			}						checkFile.addEventListener(UtilEvent.FILE_NOT_FOUND, fileNotFound);						//Mute the speech when dropdown says so...			if (speechOnOff == "speechOff")			{				speechVolume = 0;			}			else{speechVolume=0.9;}						//init video and sound			vid.attachNetStream(ns);			ns.play("media/"+ Utils.genre +"/"+ videoList[0]); // Start first Video in Array			soundSpeech.playSound("media/" + Utils.genre + "/" + speechList[0],speechVolume); // Start first SpeechClip in Array			soundMusic.playSound("media/" + Utils.genre + "/" + musicList[0], 0.2); // Start first MusicClip in Array												addChild(vidContainer);			vidContainer.addChild(vid);						if(Utils.toggleDebug) debug.drawRect(vidContainer, 10, 10, 280, 680, 0xFFFFFF, .5); // draw Background for debug text			//backround player controll			bg_player_small.x = vid.x;			bg_player_small.y = (vid.y + vid.height);			vidContainer.addChild(bg_player_small);			//Pause / Play Button			btn_pausePlayer.x = vid.x			btn_pausePlayer.y = (vid.y + vid.height) ;			vidContainer.addChild(btn_pausePlayer);			btn_pausePlayer.addEventListener(MouseEvent.CLICK, togglePause);						//Invisible Pause Button (overlay)			btn_invisiblePauseToggle.x = vid.x;			btn_invisiblePauseToggle.y = vid.y;			btn_invisiblePauseToggle.height = vid.height;			btn_invisiblePauseToggle.width = vid.width;			vidContainer.addChild(btn_invisiblePauseToggle);			btn_invisiblePauseToggle.addEventListener(MouseEvent.CLICK, togglePause);						//fullscreen button			btn_fullscreen.x = (vid.x + bg_player_small.width) - btn_fullscreen.width;			btn_fullscreen.y = (vid.y + vid.height)/* - btn_pausePlayer.height*/;			vidContainer.addChild(btn_fullscreen);			btn_fullscreen.addEventListener(MouseEvent.CLICK, toggleFullscreen);						//mute button			btn_volume_on.x = vid.x + (btn_pausePlayer.width*2);			btn_volume_on.y = (vid.y + vid.height);			vidContainer.addChild(btn_volume_on);			btn_volume_on.addEventListener(MouseEvent.CLICK, toggleVolume);						//stopButton			btn_stop.x =  vid.x + btn_pausePlayer.width;			btn_stop.y = (vid.y + vid.height);			vidContainer.addChild(btn_stop);			btn_stop.addEventListener(MouseEvent.CLICK, stopEverything);						//check if mute is active and deactivate it  --> just in case restart with mute == on!			if (bVolume == false){				vidContainer.removeChild(btn_volume_off);				bVolume = true;				SoundMixer.soundTransform = new SoundTransform(1);								}						//when "restart" is clicked in Fullscreen - call fullscreen funktion (very dirty piece)			if (MetaDating.restart == true && MetaDating.startInFullscreen == true)			{				trace("------- " + MetaDating.startInFullscreen);				restartFullscreen();				//bFullscreen = false;							}		}		//--------------------------------------				public function stopVideo(e:MouseEvent = null):void		{			//killAllSound();			//if(PRESENTATION) presentation.togglePresentation = true;#			myTimer.stop();			ns.pause();			vid.clear();			ns.close();			if(Utils.toggleDebug)				debug.clearInfo(vidContainer);			stage.fullScreenSourceRect = null;			removeChild(vidContainer);			Utils.idx = 0;		}		//--------------------------------------/////not ready!				public function stopEverything(e:MouseEvent = null):void		{			soundMusic.setVolume(0);			soundSpeech.setVolume(0);			stopVideo();						MetaDating.endOfVideo();		}		//--------------------------------------				public function togglePause(e:MouseEvent = null):void		{				//check if fullscreen is active and re-adjust the button			if (bFullscreen == false){				addHeight = btn_pausePlayer.height;			}			else {				addHeight = 0;			}						if(bPause)			{				vidContainer.removeChild(btn_pausePlayer);								btn_playPlayer.x= vid.x;				btn_playPlayer.y= (vid.y + vid.height) - addHeight;				btn_pause.x = vid.x;				btn_pause.y = vid.y - addHeight;				btn_pause.width = vid.width;				btn_pause.height = vid.height;								ns.pause();				soundSpeech.togglePauseSound();				soundMusic.togglePauseSound();				trace("pause");				bPause = false;				vidContainer.addChild(btn_pause);				vidContainer.addChild(btn_playPlayer);				btn_playPlayer.addEventListener(MouseEvent.CLICK, togglePause);				btn_pause.addEventListener(MouseEvent.CLICK, togglePause);			}			else			{								ns.resume();				soundSpeech.togglePauseSound();				soundMusic.togglePauseSound();				soundMusic.setVolume(0.2);				soundSpeech.setVolume(speechVolume);				trace("play");				bPause = true;				vidContainer.removeChild(btn_pause);				vidContainer.removeChild(btn_playPlayer);				vidContainer.addChild(btn_pausePlayer);				//vidContainer.setChildIndex(btn_pausePlayer, 2);				vidContainer.setChildIndex(btn_invisiblePauseToggle, 5);			}		}		//--------------------------------------				public function toggleFullscreen(e:MouseEvent = null):void		{				if(bFullscreen)			{				trace("fullscreen");				bFullscreen = false;				vid.x = 0;				vid.y = 0;				vid.width = 1000;				vid.height = 563;								vidContainer.removeChild(bg_player_small);				bg_player_big.x = vid.x + 110;				bg_player_big.y = (vid.y + vid.height) - btn_pausePlayer.height;				vidContainer.addChild(bg_player_big);				//vidContainer.setChildIndex(bg_player_big, 1);								//update position of buttons  -- fastest solution				btn_pausePlayer.x = vid.x;				btn_pausePlayer.y = (vid.y + vid.height) - btn_pausePlayer.height;				btn_playPlayer.x= vid.x;				btn_playPlayer.y=  (vid.y + vid.height) - btn_pausePlayer.height;					btn_volume_on.x = vid.x + (btn_pausePlayer.width*2);				btn_volume_on.y = (vid.y + vid.height) - btn_pausePlayer.height;				btn_volume_off.x = vid.x + (btn_pausePlayer.width*2);				btn_volume_off.y = (vid.y + vid.height) - btn_pausePlayer.height;				btn_fullscreen.x = 1000 - btn_fullscreen.width;				btn_fullscreen.y = (vid.y + vid.height) - btn_pausePlayer.height;				btn_invisiblePauseToggle.x = vid.x;				btn_invisiblePauseToggle.y = vid.y;				btn_invisiblePauseToggle.height = vid.height - btn_pausePlayer.height;				btn_invisiblePauseToggle.width = vid.width;				btn_stop.x =  vid.x + btn_pausePlayer.width;				btn_stop.y = (vid.y + vid.height) - btn_pausePlayer.height;								btn_pause.x = vid.x;				btn_pause.y = vid.y - btn_pausePlayer.height ;				btn_pause.width = vid.width;				btn_pause.height = vid.height;				//vidContainer.setChildIndex(btn_pause, 1);			}			else			{				trace("no fullscreen");				bFullscreen = true;				vid.x = 359;				vid.y = 110;				vid.width = 596;				vid.height = 335;								vidContainer.removeChild(bg_player_big);				vidContainer.addChild(bg_player_small);				vidContainer.setChildIndex(bg_player_small, 0);								//update position of buttons  -- fastest solution				btn_pausePlayer.x = vid.x;				btn_pausePlayer.y = (vid.y + vid.height);				btn_playPlayer.x= vid.x;				btn_playPlayer.y= (vid.y + vid.height);					btn_volume_on.x = vid.x + (btn_pausePlayer.width*2);				btn_volume_on.y = (vid.y + vid.height);				btn_volume_off.x = vid.x + (btn_pausePlayer.width*2);				btn_volume_off.y = (vid.y + vid.height);				btn_fullscreen.x = (vid.x + bg_player_small.width) - btn_fullscreen.width;				btn_fullscreen.y = (vid.y + vid.height);				btn_stop.x =  vid.x + btn_pausePlayer.width;				btn_stop.y = (vid.y + vid.height);								btn_invisiblePauseToggle.x = vid.x;				btn_invisiblePauseToggle.y = vid.y;				btn_invisiblePauseToggle.height = vid.height;				btn_invisiblePauseToggle.width = vid.width;							btn_pause.x = vid.x;				btn_pause.y = vid.y;				btn_pause.width = vid.width;				btn_pause.height = vid.height;				//vidContainer.setChildIndex(btn_pause, 1);			}		}//--------------------------------------		public function toggleVolume(e:MouseEvent = null):void		{				if(bVolume)			{				//check if fullscreen is active and re-adjust the button				if (bFullscreen == false){					addHeight = btn_pausePlayer.height;				}				else {					addHeight = 0;				}				btn_volume_off.x = vid.x +(btn_pausePlayer.width*2);				btn_volume_off.y = (vid.y + vid.height) - addHeight;				trace("volume off");				bVolume = false;				vidContainer.addChild(btn_volume_off);				btn_volume_off.addEventListener(MouseEvent.CLICK, toggleVolume);				vidContainer.removeChild(btn_volume_on);				SoundMixer.soundTransform = new SoundTransform(0);			}			else			{				trace("volume on");				bVolume = true;				vidContainer.addChild(btn_volume_on);				vidContainer.removeChild(btn_volume_off);				SoundMixer.soundTransform = new SoundTransform(1);			}		}		//--------------------------------------				//function to play the current clip again from the beginning		public function repeatVid(e:MouseEvent = null):void		{			trace("repeat");			Utils.idx--;			ns.play(Utils.genre + "/" + videoList[Utils.idx]);		}		//--------------------------------------				public function previousVid(e:MouseEvent = null):void		{			trace("previous Video");			if(Utils.idx != 0)			{				Utils.idx-= 2; // go 1 clip back. 2 because idx iterates with every play				ns.play(Utils.genre +"/" + videoList[Utils.idx]);			}		}		//--------------------------------------						public function nextVid(e:MouseEvent = null):void		{			//Utils.idx++;			trace("next Video");			//checkFile.doesFileExist("media/" + Utils.genre + "/" + playList[Utils.idx]); // check if file exists before you play it. It would make more sense to check all files at once but program gets stuck if you check  more than 20.			if(Utils.idx >= videoList.length) // if all videos have played			{				trace("claim started");				stopVideo();				// start 6 second animation with the claim				claim.startClaim();								//check if fullscreen is active and deactivate it!				if (bFullscreen == false){					vidContainer.removeChild(bg_player_big);					bFullscreen = true;					MetaDating.startInFullscreen = true; //in case of "restart"				}			}			else			{			  	ns.play("media/"+ Utils.genre +"/"+ videoList[Utils.idx]);				//debug.clearDebug(vidContainer);				trace("Utils.idx: " + Utils.idx);				if (bPause == false)				{					ns.pause(); // stay paused when previous clip was paused				}			}					}		//--------------------------------------						public function nextSound():void		{			if(Utils.idx >= speechList.length)			{				soundSpeech.stopSound();			}			else			{				soundSpeech.stopSound();				soundSpeech.playSound("media/"+ Utils.genre +"/"+ speechList[Utils.idx]);			}		}		//--------------------------------------				public function stopSound():void		{						soundSpeech.stopSound();			soundMusic.stopSound();		}				//--------------------------------------//  PRIVATE & PROTECTED INSTANCE METHODS//--------------------------------------				private function build() : void 		{			vid = new Video();			Utils.idx = 0;			client = new Object();			client.onMetaData = metadataHandler;							nc = new NetConnection();			nc.connect(null);					ns = new NetStream(nc);			ns.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);			ns.client = client;			// EVENT HANDLERS			//vidContainer.addEventListener(MouseEvent.CLICK, togglePause);			//vidContainer.addEventListener(MouseEvent.CLICK, removeRect);					}		//--------------------------------------				private function metadataHandler(metadataObj:Object):void 		{			meta = metadataObj;			trace("video duration: " + meta.duration + " : idx: " + Utils.idx);		}		//--------------------------------------				private function netStatusHandler(event:NetStatusEvent):void 		{			try 			{				switch (event.info.code) 				{					case "NetStream.Play.Start" :						// Debug Mode updates every new Video												if(Utils.toggleDebug) 							debug.drawMetaInfo(MetaDating.debugArray, videoList, Utils.genre, Utils.idx, vidContainer);					break;					case "NetStream.Play.StreamNotFound" :					case "NetStream.Play.Stop" :						Utils.idx++;						nextVid();						//nextSound();						break;				}			} catch (error:TypeError) {				// Ignore any errors.			}		}		//--------------------------------------							private function starteSound(e:TimerEvent = null):void		{			if(Utils.genre == "cgen")			{							}		}	//--------------------------------------				private function setVideo(videoX:int, videoY:int):void		{				vid.x = stage.stageWidth/2 - videoX/2;				vid.y = stage.stageHeight/2 - videoY/2;				vid.width = videoX;				vid.height = videoY;		}		//--------------------------------------		private function reloadVideo(e:MouseEvent):void		{			stopVideo();			dispatchEvent(new Event("reload button pressed"));			trace("reload button pressed");		}		//--------------------------------------				private function standardVidSetup()		{			vid.x = 359;			vid.y = 110;			vid.width = 596;			vid.height = 335;						/*vid.x = 0;			vid.y = 0;			vid.width = 1000;			vid.height = 563;*/		}		//--------------------------------------		private function fileNotFound(e:UtilEvent):void		{			trace("ERROR: file not found: " + checkFile.url);		}//--------------------------------------		/*public function set setSpeech(theSpeech:String):void		{			speechOnOff = theSpeech;		}*///--------------------------------------				public function restartFullscreen(e:MouseEvent = null):void		{					trace("fullscreen");				bFullscreen = false;				vid.x = 0;				vid.y = 0;				vid.width = 1000;				vid.height = 563;								vidContainer.removeChild(bg_player_small);				bg_player_big.x = vid.x + 110;				bg_player_big.y = (vid.y + vid.height) - btn_pausePlayer.height;				vidContainer.addChild(bg_player_big);				//vidContainer.setChildIndex(bg_player_big, 1);								//update position of buttons  -- fastest solution				btn_pausePlayer.x = vid.x;				btn_pausePlayer.y = (vid.y + vid.height) - btn_pausePlayer.height;				btn_playPlayer.x= vid.x;				btn_playPlayer.y=  (vid.y + vid.height) - btn_pausePlayer.height;					btn_volume_on.x = vid.x + (btn_pausePlayer.width*2);				btn_volume_on.y = (vid.y + vid.height) - btn_pausePlayer.height;				btn_volume_off.x = vid.x + (btn_pausePlayer.width*2);				btn_volume_off.y = (vid.y + vid.height) - btn_pausePlayer.height;				btn_fullscreen.x = 1000 - btn_fullscreen.width;				btn_fullscreen.y = (vid.y + vid.height) - btn_pausePlayer.height;				btn_invisiblePauseToggle.x = vid.x;				btn_invisiblePauseToggle.y = vid.y;				btn_invisiblePauseToggle.height = vid.height - btn_pausePlayer.height;				btn_invisiblePauseToggle.width = vid.width;				btn_stop.x =  vid.x + btn_pausePlayer.width;				btn_stop.y = (vid.y + vid.height) - btn_pausePlayer.height;								btn_pause.x = vid.x;				btn_pause.y = vid.y - btn_pausePlayer.height ;				btn_pause.width = vid.width;				btn_pause.height = vid.height;				MetaDating.restart = false;				MetaDating.startInFullscreen = false;		}	}}